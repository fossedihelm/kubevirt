load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library", "go_test")

go_library(
    name = "go_default_library",
    srcs = ["machine-type-updater.go"],
    importpath = "kubevirt.io/kubevirt/cmd/machine-type-updater",
    visibility = ["//visibility:private"],
    deps = [
        "//pkg/apimachinery/patch:go_default_library",
        "//pkg/util:go_default_library",
        "//staging/src/kubevirt.io/api/core/v1:go_default_library",
        "//staging/src/kubevirt.io/client-go/kubecli:go_default_library",
        "//staging/src/kubevirt.io/client-go/log:go_default_library",
        "//vendor/k8s.io/apimachinery/pkg/api/validation:go_default_library",
        "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
        "//vendor/k8s.io/apimachinery/pkg/labels:go_default_library",
        "//vendor/k8s.io/apimachinery/pkg/types:go_default_library",
        "//vendor/k8s.io/apimachinery/pkg/util/runtime:go_default_library",
    ],
)

load("//vendor/kubevirt.io/client-go/version:def.bzl", "version_x_defs")

go_binary(
    name = "machine-type-updater",
    embed = [":go_default_library"],
    visibility = ["//visibility:public"],
    x_defs = version_x_defs(),
)

load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_image",
)

container_image(
    name = "version-container",
    base = "//:passwd-image",
    directory = "/",
    files = ["//:get-version"],
)

container_image(
    name = "machine-type-updater-image",
    architecture = select({
        "@io_bazel_rules_go//go/platform:linux_arm64": "arm64",
        "//conditions:default": "amd64",
    }),
    base = ":version-container",
    directory = "/usr/bin/",
    entrypoint = ["/machine-type-updater"],
    files = [":machine-type-updater"],
    visibility = ["//visibility:public"],
)

go_test(
    name = "go_default_test",
    srcs = [
        "machine-type-updater_suite_test.go",
        "machine-type-updater_test.go",
    ],
    embed = [":go_default_library"],
    deps = [
        "//pkg/libvmi:go_default_library",
        "//pkg/util:go_default_library",
        "//staging/src/kubevirt.io/api/core/v1:go_default_library",
        "//staging/src/kubevirt.io/client-go/kubecli:go_default_library",
        "//staging/src/kubevirt.io/client-go/testutils:go_default_library",
        "//vendor/github.com/golang/mock/gomock:go_default_library",
        "//vendor/github.com/onsi/ginkgo/v2:go_default_library",
        "//vendor/github.com/onsi/gomega:go_default_library",
        "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:go_default_library",
        "//vendor/k8s.io/apimachinery/pkg/labels:go_default_library",
        "//vendor/k8s.io/apimachinery/pkg/types:go_default_library",
        "//vendor/k8s.io/client-go/kubernetes/fake:go_default_library",
    ],
)
